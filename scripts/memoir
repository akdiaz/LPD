#!/usr/bin/env python3

import argparse
import atexit
import contextlib
import os
import os.path

import importlib_resources
import memoir
import memoir.check_line


# sub-command functions
def extract(args):
    if args.fits_image == [""] and args.fits_mask == [""]:
        fits_image = memoir.check_line.image_exist()
        fits_mask = memoir.check_line.mask_exist()
    else:
        fits_image = args.fits_image
        fits_mask = args.fits_mask

    for image_name, mask_name in zip(fits_image, fits_mask):
        if image_name != "":
            print(f"For image {image_name} and mask {mask_name}:")
            if mask_name != "":
                region_pix, mask = memoir.check_line.make_union_mask(mask_name)
                if region_pix != False:
                    image = memoir.check_line.Image(image_name, mask)
                    (
                        chan,
                        pix,
                        freq,
                        velocity,
                        spectrum,
                        beam_area,
                        beam_pix,
                    ) = image.get_spectrum(region_pix)
                    image.write_spectrum(
                        chan, pix, freq, velocity, spectrum, beam_area, beam_pix
                    )
            else:
                print("You need to provide a fits for the mask.")


def estimate(args):
    if args.spectrum_file_name == [""]:
        spectrum_file_names = memoir.check_line.spectrum_exist()
    else:
        spectrum_file_names = args.spectrum_file_name

    if spectrum_file_names:
        for file_name in spectrum_file_names:
            print(f"For spectrum {file_name}:")
            spectrum = memoir.check_line.Spectrum(file_name)
            position_peaks = spectrum.find_peaks(args.snr, args.line_width)
            position_widths = spectrum.find_widths(position_peaks)
            __, peak_velocities, peak_fluxes, peak_widths = spectrum.find_lines(
                position_peaks, position_widths
            )
            spectrum.write_estimates(
                peak_velocities, peak_fluxes, peak_widths, file_name
            )


def identify(args):
    output = memoir.check_line.output_folder(args.output)

    if args.spectrum_file_name == [""]:
        spectrum_file_names = memoir.check_line.spectrum_exist()
    else:
        spectrum_file_names = args.spectrum_file_name

    if args.estimate_file_name == [""] and memoir.check_line.estimate_exist():
        estimate_file_name = memoir.check_line.estimate_exist()[0]
        print(f"Reading default estimate file: {estimate_file_name}.")
        vlsr, line_width = memoir.check_line.read_estimate(estimate_file_name)
        print(f"Using values: vlsr = {vlsr} and line_width = {line_width}.")
    elif args.estimate_file_name == [""] and not memoir.check_line.estimate_exist():
        vlsr = args.vlsr
        line_width = args.line_width
        print(f"Using values: vlsr = {args.vlsr} and line_width = {args.line_width}.")
    else:
        estimate_file_name = args.estimate_file_name
        print(f"Reading user estimate file: {estimate_file_name}.")
        vlsr, line_width = memoir.check_line.read_estimate(estimate_file_name)
        print(f"Using values: vlsr = {vlsr} and line_width = {line_width}.")

    # Fall back to the built-in known lines file if the user didn't specify any.
    # https://importlib-resources.readthedocs.io/en/latest/migration.html#pkg-resources-resource-filename.
    if args.known_lines_file_name is None:
        file_manager = contextlib.ExitStack()
        atexit.register(file_manager.close)
        ref = importlib_resources.files(memoir) / KNOWN_LINES_DEFAULT_FILE
        known_lines_path = file_manager.enter_context(importlib_resources.as_file(ref))

    else:
        known_lines_path = args.known_lines_file_name

    if spectrum_file_names:
        for file_name in spectrum_file_names:
            print(f"For spectrum {file_name}:")
            spectrum = memoir.check_line.Spectrum(file_name)
            lines = spectrum.potential_lines(known_lines_path, vlsr)
            position_peaks = spectrum.find_peaks(args.snr, line_width)
            position_widths = spectrum.find_widths(position_peaks)
            (
                peak_frequencies,
                peak_velocities,
                peak_fluxes,
                peak_widths,
            ) = spectrum.find_lines(position_peaks, position_widths)
            actual_lines = memoir.check_line.match_lines(
                lines, peak_frequencies, args.frequency_tolerance
            )
            spectrum.write_parameters(
                vlsr,
                line_width,
                actual_lines,
                peak_frequencies,
                peak_velocities,
                peak_fluxes,
                peak_widths,
                output,
                file_name,
            )
            spectrum.make_plot(
                file_name, actual_lines, peak_frequencies, peak_fluxes, output
            )


parser = argparse.ArgumentParser(
    description="MEMOIR: Molecular EMissiOn IdentifieR. Searches for lines in a spectrum and assignes IDs by comparing their frequencies with those of known lines. Returns a file text with the ID and the peak values (frequency, velocity, intensity/flux) of the detected lines.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser.add_argument(
    "-v",
    "--version",
    action="version",
    version=memoir.__version__,
)

subparsers = parser.add_subparsers(
    title="subcommands",
    description="valid subcommands",
    help="type memoir <<subcommand>> -h to get additional help",
)

# create the parser for the "extract" command
parser_extract = subparsers.add_parser(
    "extract",
    description="Extracts a spectrum from a fits image (provided by -i) using a mask image (provided by -m) and writes it to disk with end-name 'spectrum.txt'.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser_extract.add_argument(
    "-i",
    "--fits_image",
    type=str,
    nargs="+",
    help="Fits image to take spectrum on mask <<fits_mask>>.",
    default=[""],
)

parser_extract.add_argument(
    "-m",
    "--fits_mask",
    type=str,
    nargs="+",
    help="Mask used to take spectrum in image <<fits_image>>.",
    default=[""],
)

parser_extract.set_defaults(func=extract)

# create the parser for the "estimate" command
parser_estimate = subparsers.add_parser(
    "estimate",
    description="Detects peaks in a spectrum (provided by -s) and estimate their velocity and width (at 10% of maximum). Writes to disk a file with the relevant info in the working directory.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser_estimate.add_argument(
    "-s",
    "--spectrum_file_name",
    type=str,
    nargs="+",
    help="Name of the file (including extension) with the spectrum to analyse. If not set (default behaviour) will use all the files in the working directory end-named 'spectrum.txt'.",
    default=[""],
)

parser_estimate.add_argument(
    "--snr",
    type=float,
    help="Signal-to-noise ratio. Only peaks with flux higher than <<SNR>> will be returned",
    default=5,
)

parser_estimate.add_argument(
    "-w",
    "--line_width",
    type=float,
    help="Line width prior to estimation (in the velocity units of the input spectrum). Local peaks closer than <<line_width>> will be considered as belonging to the same line, and only the one with higher flux will be returned.",
    default=20,
)

parser_estimate.set_defaults(func=estimate)

# create the parser for the "identify" command
parser_identify = subparsers.add_parser(
    "identify",
    description="Detects lines in a spectrum (provided by -s) and identifies them by comparing their frequencies with those in a known-lines file (provided by -l). Writes to disk a file and plot(s) with the relevant info in the folder <<output>>.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser_identify.add_argument(
    "-s",
    "--spectrum_file_name",
    type=str,
    nargs="+",
    help="Name of the file (including extension) with the spectrum to analyse. If not set (default behaviour) will use all the files in the working directory end-named 'spectrum.txt'.",
    default=[""],
)

parser_identify.add_argument(
    "-e",
    "--estimate_file_name",
    type=str,
    help="Name of the file (including extension) with estimates of the velocity and width (at 10%% of maximum) of the peaks in the spectrum. If not set (default behaviour) will use, if exists, a file in the working directory named 'estimate.txt', or the values set with the parameters --vlsr and --line_width, in that order of preference.",
    default=[""],
)

# The default file used by --known_lines_file_name; included in the package.
KNOWN_LINES_DEFAULT_FILE = "data/allmols_combined_transitions.csv"

parser_identify.add_argument(
    "-l",
    "--known_lines_file_name",
    type=str,
    help="Name of the file (including extension) with the known lines. If not specified, use memoir's built-in one.",
    default=None,
)

parser_identify.add_argument(
    "-o",
    "--output",
    type=str,
    help="Name of the output folder.",
    default="output",
)

parser_identify.add_argument(
    "--snr",
    type=float,
    help="Signal-to-noise ratio. Only peaks with flux higher than <<SNR>> will be returned",
    default=5,
)

parser_identify.add_argument(
    "-w",
    "--line_width",
    type=float,
    help="Line width (in the velocity units of the input spectrum). Local peaks closer than <<line_width>> will be considered as belonging to the same line, and only the one with higher flux will be returned.",
    default=20,
)

parser_identify.add_argument(
    "-t",
    "--frequency_tolerance",
    type=float,
    help="Frequency tolerance (in the frequency units of the input spectrum). If a detected line has a known line with a frequency separation less than <<frequency_tolerance>>, it will assume its ID, if not, will remain unidentified (U).",
    default=0.01,
)

parser_identify.add_argument(
    "--vlsr",
    type=float,
    help="Source radial velocity (local standard of rest) in km/s.",
    default=0,
)

parser_identify.set_defaults(func=identify)

if __name__ == "__main__":
    args = parser.parse_args()

    args.func(args)
